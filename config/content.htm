<h1>首頁</h1>
<p>成員名單:尚未確認</p>
<p>已成功將SSH建立出來</p><h1>問題集中串</h1>
<p>此串會將問題的時間以及解決過程紀錄出來</p>
<h1>課程內容</h1>
<h2>第一週</h2>
<h2>第二週</h2>
<p>onshape 一個將工具放在網路上使用</p>
<p>新的網站是可以使用https://localhost:9443但如果在其他環境下則需要自己去找IPV6的位置才能完成同步協調</p>
<h2>第三週</h2>
<p>老師將cmsimde更新兩個功能</p>
<p>1.acp.bat   add commit push 一次推完</p>
<p>2.cms.bat  直接打開cmsimde</p>
<p>以及一些cmsimde的更新以及教導如何更新cmsimde</p>
<h2>第四週</h2>
<p>這週開始進行分組活動並開始教導如何從網頁上的資料截下來並使用程式的方法,再來開始要進行個實驗室網站的時程</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import bs4
# for os.environ and os.system()
import os
# for geting html file path
import pathlib
 
# for pythn 3.9
proxy = 'http://[2001:288:6004:17::69]:3128'
 
os.environ['http_proxy'] = proxy 
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy
 
'''
url:  'class_ajax.php',
data: { pselyr: pselyr, pselclss: pselclss
'''
semester = '1092'
classno = '42311'
column = True
 
if semester == None:
    semester = '1091'
if classno == None:
    # 42311 is 設一甲
    classno = '42311'

headers = {'X-Requested-With': 'XMLHttpRequest'}
 
url = 'https://qry.nfu.edu.tw/class_ajax.php'
post_var = {'pselyr': semester, 'pselclss': classno}
 
result = requests.post(url, data = post_var, headers = headers)
 
soup = bs4.BeautifulSoup(result.content, 'lxml')
 
# 先除掉所有 anchor
for a in soup.findAll('a'):
    # bs3 語法
    #a.replaceWithChildren()
    # bs4 語法, 將標註與內容拆開
    a.unwrap()
 
# 根據輸出設定, 取出 class='tbcls' 的 table 資料
table = soup.find('table', {'class': 'tbcls'})
 
# 重建 table, 設定邊線為 1 pixel
output = "&lt;table border='1'&gt;"
 
for i in table.contents:
    # 利用 replace 復原  
    output += str(i).replace("&amp;nbsp", "   ")
output += "&lt;/table&gt;"
# print(output)
# 將 output 寫入 w1_class_local.html
with open("w1_class_local.html", "w", encoding="utf-8") as file:
    file.write(output)
# 利用 os.system() 以 default browser 開啟 w1_class_local.html
filePath = pathlib.Path(__file__).parent.absolute()
#print(filePath)
# set firefox as default browser and start url to open html file
os.system("start file:///" + str(filePath) + "\\w1_class_local.html")</pre>
<p>在這之中其中有一行,是因為使用著習慣設定會在空白出現&amp;nbsp 而將那一行更改成</p>
<p>output += str(i).replace("&amp;amp;nbsp", " &amp;nbsp; ")</p>
<p>即可</p>
<p>最後成品網頁</p>
<p><img alt="" height="1039" src="/images/q1SEe0ppOA.png" width="1920"/></p>
<p></p>
<h1>一般步驟放置區</h1>
<p>此串會放置一些比較統一化的指令串</p>
<h2>建立SSH的方法 使用非設計系網路的環境下</h2>
<p>可參考資料<a href="http://mde.tw/cp2020/content/SSH.html">http://mde.tw/cp2020/content/SSH.html</a></p>
<p>以下將會詳細的解說步驟一步一步的解說設定自己的PPK</p>
<p></p>
<p><img alt="" height="522" src="/images/mWjH3DUGmP.png" width="537"/></p>
<p>1.首先先在CMD上面輸入sh</p>
<p>2.在依照格式 ssh-keygen -t rsa -b -C "隨便打"    (有大小寫區分)</p>
<p>3.再將star_ipv6.bat裡新增 set GIT_SSH=%Disk%:\putty\plink.exe 後儲存</p>
<p>4.打開puttygen.exe 按下 generate</p>
<p>5.等待讀條玩按下save private key 並將檔案儲存到 home_ipv6/.ssh裡</p>
<p>6.將中間裡的一大串複製到github的SSH and GPG keys 裡先New SSH key並將那一大堆亂碼輸入進去</p>
<p><img alt="" height="579" src="/images/VDslgzUJkt.png" width="638"/></p>
<p><img alt="" height="901" src="/images/XAC9IGLAk9.png" width="1920"/></p>
<p></p>
<p></p>
<p>7.打開putty.exe並新增github.com(如下圖)</p>
<p></p>
<p><img alt="" height="546" src="/images/AH9H1ghVjF.png" width="599"/></p>
<p><span style="background-color: #ffffff; color: #ff0000;">(提醒:在設計系網路以外不用設定PROXY)</span></p>
<p>8.再把SSH的+打開會有Auth裡面會有一行選擇KEY的格子點選Browse選擇剛剛在home_ipv6/.ssh裡建的KEY</p>
<p><img alt="" height="544" src="/images/vEGIVHpJPS.png" width="600"/></p>
<p>9.回到Session按下save之後再按下open之後就會出現如下圖若顯示如下圖則表示成功</p>
<p><img alt="" height="518" src="/images/fEj6quGIap.png" width="822"/></p>
<p>10.慢慢享受不用打帳密的爽感吧....</p>
<p></p>
<p></p><h2>更新cmsimde的方法</h2>
<p>1.先確認好最新的版本可從已作好的同學或老師的倉儲取的</p>
<p>2.將目錄切換至cmsimde</p>
<p> 通常為</p>
<p>cd tmp</p>
<p>cd wcm2021</p>
<p>cd cmsimde</p>
<p>3.再來先把新的東西pull下來</p>
<p>git pull</p>
<p>4.再將版本checkout成最新的版本</p>
<p>git checkout 版本號</p>
<p>基本有出現就能完成更新cmsimde了</p>
<p>順帶一題<span style="color: #ff0000;">大部分的推上去無綠勾勾也都是cmsimde版本混亂的原因而版本混亂也能這樣解決喔</span></p>
<h2>打開網站的方法(搬運資料)</h2>
<p><span style="color: #ff0000;">將裡面cp2020更改成你的資料名即可</span></p>
<p>1.切換至cp2020裡的cmsimde並用python啟動wsgi.py</p>
<p>2.然後將網址複製到遊覽器上(預設密碼為:admin)</p>
<p><img alt="" height="381" src="https://40923123.github.io/cp2020/images/O34MnuFpF7.png" width="1224"/></p>
<h4>push的方法</h4>
<p>1.git add .</p>
<p>2.git commit -m "隨便打"</p>
<p>3.git push</p>
<p>之後輸入github的帳密即可push了</p>
<p><img alt="" height="728" src="https://40923123.github.io/cp2020/images/0DdEMh6ZGo.png" width="722"/></p>
<h2>heroku 連結遠端方法</h2>
<p><span>步驟一:</span><span> </span>(<span>建立 Heroku 帳號</span>) 進入<span> </span><a href="https://heroku.com/">https://heroku.com</a>, 利用學校配發的 @gm 登記一個 Heroku 帳號, 關鍵在於密碼設定必須要至少 8 個字元, 且字元中必須包含符號, 英文字母及數字,  並且登記後要進入 @gm 帳號進行確認後才能開通 Heroku 帳號.</p>
<p>完成帳號登記後, 必須知道目前 Heroku 只允許免費建立五個應用程式, 且每個程式的最大容量為 500MB.</p>
<p><span>步驟二:</span><span> </span>(<span>建立 Heroku app</span>) 登入 Heroku 後, 先以 s + 學號 建立第一個 app, 完成後, 將可至 https://s學號.herokuapp.com 連線取得網站最初內容.</p>
<p><span>步驟三:</span><span> </span>(下載 Heroku CLI) 從<span> </span><a href="http://a.kmol.info:88/heroku.7z">http://a.kmol.info:88/heroku.7z</a><span> </span>下載 Heroku cli 程式檔案, 解開至隨身碟 Y: 所在位置或者是 Hybrid 設定的位置.</p>
<p><span>步驟四:</span><span> </span>(<span>修改命令搜尋路徑</span>) 修改隨身系統的啟動批次檔案, 讓 Windows 的命令視窗中可以執行 heroku.exe, 或者稱作"設法將 heroku.exe 所在目錄位置, 設為 Windows 搜尋路徑之一".</p>
<p>重新啟動已經納入可執行 heroku.exe 的隨身碟 start_ipv6.bat 或 start_ipv4.bat</p>
<p><span>步驟五:</span><span> </span>(<span>測試 heroku 執行</span>) 測試是否能夠在修改後的命令列中執行 heroku.exe, 輸入 heroku version 若回應所使用的版本表示上述路徑設定已經成功.</p>
<p><span>步驟六:</span><span> </span>(<span>設定 heroku 代理主機</span>) 先前我們已經知道網路的應用包含 client 與 server, 不同 client 採用不同的 proxy 設定與 server 連線, 其中 firefox 作為 WWW 網路協定的 client, 有其自己的網路 Proxy 設定, 也可以直接使用操作系統的 Proxy 設定.</p>
<p>Chrome 作為 WWW 網路協定的 client, 目前 Windows 下的最新版, 只能使用操作系統的 Proxy 設定.</p>
<p>而 git 作為 git client 與 github server 連線的 Proxy 設定, 則寫在 y:\home_ipv6 下的 .giconfig 中,  以 git config --global http.proxy "http://your_proxy:port" 進行設定.</p>
<p>相同的道理 heroku cli 作為<span> </span><a href="https://heroku.com/">https://heroku.com</a><span> </span>伺服器的 client 端, 也有其 Proxy 的設定方式, 也就是在 start_ipv6.bat 中加入:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_577614">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">REM </code><code class="js keyword">for</code> <code class="js plain">heroku login</code></div>
<div class="line number2 index1 alt1"><code class="js plain">set HTTP_PROXY=http:</code><code class="js comments">//[2001:288:6004:17::53]:3128</code></div>
<div class="line number3 index2 alt2"><code class="js plain">set HTTPS_PROXY=http:</code><code class="js comments">//[2001:288:6004:17::53]:3128</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><span>步驟七:</span><span> </span>(<span>設定同步倉儲</span>) 針對利用 Heroku 同步 Github Pages 上的網站內容, 只需要透過 git remote add (Heroku 指令為 heroku git:remote -a heroku_倉儲_名稱, 之後只要在 heroku login 狀態下, 可以直接利用 git push) 在近端設定一個連線到 Heroku 倉儲的代號, 就能在每次更新 Github Pages 倉儲後, 再將內容同步至 Heroku. 網際內容管理課程將使用兩種 Heroku app 設定, 也就是靜態網頁與動態網頁:</p>
<p>靜態網頁 - 採用 php 方式部署, 讓 Heroku 將靜態網頁視為 PHP 程式, 利用 index.php 跳轉到 index.html</p>
<p>動態網頁 - 讓 Heroku 執行 cmsimde/wsgi.py 的方式進行雲端伺服.</p>
<p><span>步驟八:</span><span> </span>(<span>以 git 進行提交推送</span>) 利用 heroku git:remote -a 設定的同步倉儲其推送名稱內定為 "heroku", 使用者只要使用 git push heroku 就可以將改版內容推送到對應的 Heroku app 倉儲.</p>
<p>指令操作步驟:</p>
<div>
<div class="syntaxhighlighter py" id="highlighter_636628">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py comments"># 以 interactive 模式登入 Heroku, 完成後產生 y:\home_ipv6\_netrc</code></div>
<div class="line number2 index1 alt1"><code class="py plain">heroku login </code><code class="py keyword">-</code><code class="py plain">i</code></div>
<div class="line number3 index2 alt2"><code class="py comments"># 針對已經登入的 Heroku 帳號下的 taiwan-01 app, 設為此倉儲的 remote 同步倉儲, 且在倉儲中會自建名稱為 heroku 的 remoate site.</code></div>
<div class="line number4 index3 alt1"><code class="py plain">heroku git:remote </code><code class="py keyword">-</code><code class="py plain">a taiwan</code><code class="py keyword">-</code><code class="py plain">no1</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>上述步驟完成後的 Heroku 網站:<span> </span><a href="https://taiwan-no1.herokuapp.com/">https://taiwan-no1.herokuapp.com</a></p>
<p></p>
<p>----------------------------上述為老師的步驟教學---------------------------------------</p>
<p>接下來會在下面去解說實際上可能會遇到的問題</p>
<h4>路徑問題</h4>
<p>首先是heroku檔案的位置路徑必須是正確的只要位置不對啟動程式無法透過路徑找到heroku的執行檔,</p>
<p>這時打有關heroku的指令都會顯示:  heroku不是內部指令的提示 </p>
<p><img alt="" height="731" src="/images/heroku-2.png" width="564"/></p>
<p>從圖中可以看到新增 </p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">set path_heroku=%Disk%:\heroku\bin;
</pre>
<p></p>
<p>此行就是指在開啟時設定heroku路徑的位置去抓出heroku檔案的指令</p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">set HTTP_PROXY=http://[2001:288:6004:17::53]:3128
set HTTPS_PROXY=http://[2001:288:6004:17::53]:3128</pre>
<p></p>
<p>再來這兩行則是在進行等等heroku登陸的Proxy的設定</p>
<p></p>
<p>最後下面的 </p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">path=%Disk%:;%path_python%;%path_portablegit%;%path_heroku%;%path%;</pre>
<p>其中的%path_heroku%;就是將路使用這些路徑,第一行是設定路徑而這行是使用設定的路徑</p>
<p></p>
<p>------------------------------------------------------------------------------------------------</p>
<p></p>
<p>等上述路線都確認無誤後即可測試heroku version如有出現版本號則表示成功</p>
<p><img alt="" height="511" src="/images/heroku-1.png" width="983"/></p>
<p></p>
<p>再來照著步驟登陸後切換到自己的倉儲下輸入  heroku git:renite -a 自己設定的heroku app名稱</p>
<p>出現藍字就表示成功</p>
<p></p>
<p></p>
<p></p>